# Hypotheses and associations {#sec-associations}

```{r libraries-hide}
#| warning: false
#| echo: false
library(kableExtra)
library(patchwork)
library(tidyverse)
```

```{r readin-hide}
#| warning: false
#| echo: false
# -- code to read in the aggregated subject level data from the clearly-understood data set

# -- study one
study.one.gen <- read_csv("study-one-general-participants.csv")

# -- study two
study.two.gen <- read_csv("study-two-general-participants.csv")
```

## Overview {#sec-associations-overview}

Welcome to your overview of the work we will do together in **Week 6**.

This week, we focus on methods that allow us to make sense of the evidence for **associations**.

Looking ahead to your professional lives, our aim is to help you to build the understanding *and* to learn the skills that will ensure that you can practise, inspire and manage the most effective ways to make sense of associations.

We will work in the context of a live research project with potential real world impacts: the **Clearly understood** project.
Working in a concrete **context** will help you to make sense of what you are doing, even if you are interested in other topics.

::: callout-tip
The **Clearly understood** project aims to fix the problem that we are not sure how health information should be communicated so that everyone can understand it. 

We ask the research questions:

1.  What person attributes predict success in understanding?
2.  Can people accurately evaluate whether they correctly understand written health information?
:::

As we work together, we will be revisiting some of the ideas and techniques you have seen in previous classes, so that you can *consolidate* your learning.
Then, we will *extend* your development with some new ideas to strengthen your skills.

## Our learning goals {#sec-associations-goals}

This week, we develop your critical thinking and we strengthen your practical skills.

**1. Critical thinking**

-   *Concepts*: how we go from ideas and questions to hypotheses

**2. Practical skills**

-   *Concepts* -- associations: correlations, estimates and hypothesis tests
-   *Skills* -- visualizing covariation
-   *Skills* -- writing the code
-   *Skills* -- estimating correlations
-   *Skills* -- hypothesis tests for correlations
-   *Skills* -- interpreting and reporting correlations

## Learning resources {#sec-associations-resources}

You will see, next, the lectures we share to explain the concepts behind the critical thinking and analysis skills you will develop (@sec-associations-lectures), then you will see information about the practical materials you can use to practise your skills (@sec-associations-practical).

::: callout-tip
We think your learning best if you *first* watch the lectures *then* do the practical exercises.
:::

### Lectures {#sec-associations-lectures}

The lecture material for this week is presented in five short parts. 

Click on a link and your browser should open a tab showing the *Panopto* video for the lecture part.

1. Part 1 (12 minutes) **Overview**: The concepts and skills we will learn about in weeks 6-10, and why it helps to embed the classes in the context of a research project.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=768a9621-a440-4a1a-a3f8-b22200c1d4e2&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-associations-1" ></iframe>
```

2. Part 2 (18 minutes): Hypotheses, measurements and associations -- how you can think critically.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=9a10462c-e185-4069-b72a-af5000cc076a&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-associations-2" ></iframe>
```

3. Part 3 (14 minutes): The live research project we will use to put our practical skills exercises and critical thinking challenges into context.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=1653a285-fa5b-45c4-a850-af5000d1c8d5&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-associations-3" ></iframe>
```

4. Part 4 (20 minutes): Seeing, thinking and talking about associations, correlations.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=ca174423-d385-40d5-9068-af5000d60688&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-associations-4" ></iframe>
```

5. Part 5 (12 minutes): How we use R to estimate and test correlations. How we write about correlation results

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=9d53628e-3133-43aa-b78f-af5000dc0d0b&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-associations-5" ></iframe>
```

::: callout-tip
The slides presented in the videos can be downloaded here:

- [The slides](files/411-hypotheses-assocations.html) exactly as presented (22 MB). 

You can download the web page `.html` file and click on it to open it in any browser (e.g., Chrome, Edge or Safari). The slide images are high quality so the file is quite big and may take a few seconds to download.
:::

### Practical materials {#sec-associations-practical}

We are going to work through some practical exercises, next, to stimulate your thinking and learn the practical skills you need to see, test and talk about correlation analyses of the associations between variables.

We will work with two data files which you can download by clicking on their names (below):

-   [`study-one-general-participants.csv`](files/study-one-general-participants.csv).
-   [`study-two-general-participants.csv`](files/study-two-general-participants.csv).

Once you have downloaded the files, you will need to upload them to the R-Studio server to access and use the R files.

::: callout-important
Here is a link to the sign-in page for [R-Studio Server](https://psy-rstudio.lancaster.ac.uk/auth-sign-in?appUri=%2F)
:::

#### Practical materials guide {#sec-associations-practical-guide}

You will find that the practical exercises are simpler to do if you follow these steps in order.

1. **The data** --- We will take a quick look at what is inside the data files so you know what everything means.
2. **The `how-to` guide** --- We will go through the practical analysis and visualization coding steps, showing all the code required for each step.
3. **The `practical` exercises** --- We will set out the tasks, questions and challenges that you should complete to learn the practical skills we target this week.

::: callout-tip
We show you how to do everything you need to do in the `practical` exercises, first, in the `how-to` guide.

- Start by looking at the `how-to` guide to understand what steps you need to follow in the lab activity.

If you want to make it more challenging for yourself, go straight to Step 3.
:::

We will take things *step-by-step*:  

- different parts for different phases of the analysis workflow;
- different tasks for different things you need to do;
- different questions to examine different ideas or coding challenges.

#### The data files {#sec-associations-practical-data}

Each of the data files we will work with has a similar structure.

Here are what the first few rows in the data file `study.one.gen` looks like:

```{r head}
#| warning: false
#| echo: false
kable(head(study.one.gen))
```

::: callout-tip
The webpage has a slider under the data table window, so you can scroll across the columns: move your cursor over the window to show the slider.
:::

When you look at the data table, you can see the columns:

-   `participant_ID` participant code
-   `mean.acc` average accuracy of response to questions testing understanding of health guidance
-   `mean.self` average self-rated accuracy of understanding of health guidance
-   `study` variable coding for what study the data were collected in
-   `AGE` age in years
-   `HLVA` health literacy test score
-   `SHIPLEY` vocabulary knowledge test score
-   `FACTOR3` reading strategy survey score
-   `GENDER` gender code
-   `EDUCATION` education level code
-   `ETHNICITY` ethnicity (Office National Statistics categories) code

#### The how-to guide {#sec-associations-practical-how-to}

We will take things *step-by-step*.

We split .Rmd scripts by steps, tasks and questions:  

- different parts for different phases of the analysis workflow;
- different tasks for different things you need to do;
- different questions to examine different ideas or coding challenges.

::: callout-tip
- Make sure you start and work your way, in order, through each part, task and question.
- Complete each task before you move on to the next task.
:::

##### How-to Part 1: Set-up

To begin, we set up our environment in R.

###### How-to Task 1 -- Run code to empty the R environment

```{r}
#| eval: false
rm(list=ls())                            
```

###### How-to Task 2 -- Run code to load libraries

Load libraries using `library()`.

```{r}
#| eval: false
library("tidyverse")
```

##### How-to Part 2: Load and examine the data

###### How-to Task 3 -- Read in the data file we will be using

The code in the `how-to` guide was written to work with the data file:

- `study-one-general-participants.csv`.

Read in the data file -- using `read_csv()`.

```{r}
#| eval: false
study.one.gen <- read_csv("study-one-general-participants.csv")
```

::: callout-tip
You can choose your own file name, but be sure to give the data-set a *distinct* name, e.g., `study.one.gen` so that R can distinguish between the different data you will work with.
:::

###### How-to Task 4 -- Inspect the data file

Use the `summary()` function to take a look.

```{r}
summary(study.one.gen)
```

::: callout-tip
- `summary()` will give you either descriptive statistics for variable columns classified as numeric or will tell you that columns in the dataset are not numeric.
- `summary(...)` is a function and, again, you put the name of the dataset inside the brackets to view it.
:::

> Q.1. What is the mean of `mean.acc`?

> A.1. 0.8163  

> Q.2. What class is the variable `study`?

> A.2. `character`

> Q.3. Does the summary indicate if any variable has missing values (`NA`)?

> A.3. No

###### How-to Task 5 -- Change the class or type of a variable

You can use the `as.factor()` function you used in Week 5.

```{r}
#| eval: false
study.one.gen$study <- as.factor(study.one.gen$study)
```

> Q.4. After you have done this, what information does `summary()` give you about the variable `study`?

> A.4. We can see the number 169 beside the word `studyone`: this tells us that there are 169
observations, in the column, each one is a value: the word or character string `studyone`.

::: callout-tip
Remember from Week 3 that we can only count how many times a category value (or factor level) occurs: here, we are counting how many times the word `studyone` occurs in the factor column `study`.
:::

##### How-to Part 3: Visualize associations

###### How-to Task 6 -- Draw scatterplots to examine associations between variables

You have seen these code moves before, in previous classes (weeks 3 and 4): we are **consolidating** skills by practising your coding in different contexts, using different data.

We **extend** your skills by adding some new moves.

Create scatterplots to examine the association between some variables.

::: callout-tip
We are working with `geom_point()` and you need `x` and `y` aesthetic mappings.
:::

For example, we can draw a scatterplot to examine the association between `mean.self` and `mean.acc`.

```{r}
ggplot(data = study.one.gen, aes(x = mean.self, y = mean.acc)) + 
    geom_point()
```  

Examine this plot --- it shows: the possible association between x-axis variable `mean.self` and y-axis variable `mean.acc`.

You have seen this kind of code before but it will help your learning if, now, we take a look at the code step-by-step.

The plot code moves through the following steps:  

1. `ggplot(...)` makes a plot.
2. `ggplot(data = study.one.gen, ...)` uses the `study.one.gen` data-set.
3. `ggplot(...aes(x = mean.self, y = mean.acc))` uses two aesthetic mappings.
4. `geom_point()` show the mappings as points.

::: callout-tip
What are *aesthetic mappings*?

Aesthetic mappings translate data information -- numbers or values in column variables -- into things you can see in plots.

For a scatterplot, we need to translate values for two variables into the position of each point in the plot.

Here:

- `x = mean.self` maps `mean.self` values to x-axis (horizontal, left to right) positions.
- `y = mean.acc` maps `mean.acc` values to y-axis (vertical, bottom to top) positions.
:::
  
Now do scatterplots with any pair of numeric variables you like. 

Remember that we saw with `summary()` that not every variable consists of numbers.

Check out the example code, below.

```{r}  
#| eval: false
ggplot(data = study.one.gen, aes(y = mean.self, x = mean.acc)) +
    geom_point()  

ggplot(data = study.one.gen, aes(x = AGE, y = mean.self)) +
  geom_point()  
  
ggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.self)) +
  geom_point()  

ggplot(data = study.one.gen, aes(x = HLVA, y = mean.self)) +
  geom_point()  
```

###### How-to Task 7 -- Edit the scatterplots to change how they look

Edit the appearance of a plot step-by-step.

We are going to edit:

1. the appearance of the points using alpha and size;
2. the colour of the background using `theme_bw()`;
3. the appearance of the labels using `labs()`.

We make the changes, one change at a time.

You have seen one of these moves before and you can guess at how to do the others.
Click on the drop-down view to see the code but, if you want a challenge, try first to write the code on your own.

1. the appearance of the points using alpha and size

:::{.callout-tip collapse="true"}
## Code
```{r}
ggplot(data = study.one.gen, aes(x = HLVA, y = mean.self)) +
  geom_point(alpha = 0.5, size = 2) 
```
:::

2. the colour of the background using `theme_bw()`

:::{.callout-tip collapse="true"}
## Code
```{r}
ggplot(data = study.one.gen, aes(x = HLVA, y = mean.self)) +
  geom_point(alpha = 0.5, size = 2)  +
  theme_bw()
```
:::

3. the appearance of the labels using `labs()`

:::{.callout-tip collapse="true"}
## Code
```{r}
ggplot(data = study.one.gen, aes(x = HLVA, y = mean.self)) +
  geom_point(alpha = 0.5, size = 2)  +
  theme_bw() +
  labs(x = "HLVA", y = "mean self rated accuracy")
```  
:::

::: callout-tip
The arguments `alpha` and `size` can change the appearance of most geometric objects (geoms) in ggplot:

- in the code example, here, we vary the `alpha` number to change how opaque or transparent the points are;
- and we vary the size number to vary the size of the points.
:::

###### How-to Task 8 -- Now experiment

There are no right answers here: edit the appearance of your plots by changing alpha, size and colour of points.

::: callout-tip
Play is an important part of learning.

- Experimenting with how plots look is a key element in becoming a master at data visualization. You won't know what looks good to you unless you try different things.
:::

If you really want to extend your skills, it is really important that you learn how to find useful online help.

> Q.5. Can you find the ggplot reference page on scatterplots? 

:::{.callout-tip collapse="true"}
## Hint
Do a search with the keywords: `ggplot reference geom_point`
:::

:::{.callout-tip collapse="true"}
## Answer
> A.5. You can find reference information here: <https://ggplot2.tidyverse.org/reference/geom_point.html>
:::

> Q.6. Can you change the colour of the points to a colour you like?

:::{.callout-tip collapse="true"}
## Hint
Do a search with the keywords: `ggplot colours`.

Useful information on colour can be found here:

<https://r-graphics.org/recipe-colors-setting>

or 

<http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/>
:::

:::{.callout-tip collapse="true"}
## Answer
> A.6. Here is how you do it: R will recognize many English colour names.

```{r}
#| eval: false
ggplot(data = study.one.gen, aes(x = HLVA, y = mean.self)) +
  geom_point(alpha = 0.5, size = 2, colour = "hotpink")  +
  theme_bw() +
  labs(x = "HLVA", y = "mean self rated accuracy")
```
:::

::: callout-important
Now you: experiment!
:::

##### How-to Part 4: Analyse associations

###### How-to Task 9 -- Use correlation to to answer a research question

Examine associations between variables using correlation.

One of our research questions is:

2. Can people accurately evaluate whether they correctly understand written health information?

We can answer this question by examining whether mean self-rated accuracy of understanding correlates with mean accuracy of understanding.
The logic is that if we can accurately rate our own understanding (from bad to good) then that rating should be associated -- should be correlated with -- how accurately we can actually respond to questions that test that understanding.

> Q.7. How do we examine the correlation between mean self-rated accuracy (`mean.self`) and mean accuracy (`mean.acc`)?

:::{.callout-tip collapse="true"}
## Hint
Remember from the Week 6 lecture, that we use `cor.test()`:
:::

Can you figure out how to code a correlation test?
It helps with your learning if you first try to anticipate what the code will look like.
Then reveal the code, below, to see what you guessed right.
(Getting some things right, and some things wrong, is part of the learning process.)

:::{.callout-tip collapse="true"}
## Code
> A.7. Here is how you do it: take a look at the code and the results of the correlation test.

```{r}
cor.test(study.one.gen$mean.acc, study.one.gen$mean.self, method = "pearson",  alternative = "two.sided")
```
:::

> Q.3. What is r, the correlation coefficient?

:::{.callout-tip collapse="true"}
## Answer
> A.3. r = 0.4863771
:::

> Q.4. Is the correlation significant?

:::{.callout-tip collapse="true"}
## Answer
> A.4. r is significant
:::

> Q.5. What are the values for t and p for the significance test for the correlation?

:::{.callout-tip collapse="true"}
## Answer
> A.5. t = 7.1936, p = 2.026e-11
:::

> Q.6. What do you conclude, given the correlation results?

:::{.callout-tip collapse="true"}
## Hint
Review the scatterplot you drew earlier (or draw one now) to examine the shape of the association between these variables.
:::

:::{.callout-tip collapse="true"}
## Answer
> A.6. `mean.acc` and `mean.self` are positively correlated suggesting that as 
# `mean.acc` scores increase so also do `mean.self` scores
:::

#### The practical exercises {#sec-associations-practical-workbook}

Now you will progress through a series of tasks, and challenges, to test what you have learnt.

::: callout-warning
Now we will work with the data file

-   `study-two-general-participants.csv`
:::

We again split the steps into into parts, tasks and questions.

We are going to work through the following workflow steps:

1.  Empty the R environment
2.  Load relevant libraries
3.  Read in the data file
4.  Inspect the data
5.  Change the type classification of variables if necessary
6.  Draw scatterplots to visualize the association between pairs of variables
8.  Estimate and test the correlations between pairs of variables

::: callout-tip
- The `how-to` guide showed you what functions you needed and how you should write the function code.
- Use the code structure you have seen and *change* it to use the data required for these `practical exercises`: you will need to change the data-set name, the variable names, to get the code to work for the following exercises.
- In learning how to code, the process of adapting example code is a key skill: we are learning what can change, and what has to stay the same.
:::

In the following, we will guide you through the tasks and questions step by step.

An answers version of the workbook will be provided after the practical class.

##### Practical Part 1: Set-up

To begin, we set up our environment in R.

###### Practical Task 1 -- Run code to empty the R environment

```{r}
#| eval: false
rm(list=ls())                            
```

###### Practical Task 2 -- Run code to load relevant libraries

```{r}
#| eval: false
library("tidyverse")
```

##### Practical Part 2: Load the data

###### Practical Task 3 -- Read in the data file we will be using

The data file for the *workbook* is called:

- `study-two-general-participants.csv`

Use the `read_csv()` function to read the data file into R.

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
study.two.gen <- read_csv("study-two-general-participants.csv")
```
:::

When you code this, you can choose your own file name, but be sure to give the data object you create a distinct name e.g. `study.two.gen`.

###### Practical Task 4 -- Inspect the data file

Use the `summary()` or `head()` functions to take a look

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
summary(study.two.gen)
```
:::

>**Q.1.** What is the median of `AGE`?

<!-- - A.1. 32.50   -->

>**Q.2.** What class is the variable `ETHNICITY`?

<!-- - A.2. character   -->

>**Q.3.** Does the summary indicate if any variable has missing values (NAs)?

<!-- - Q.3. No -->

###### Practical Task 5 -- Change the class or type of the variable `ETHNICITY` to factor

You can use the `as.factor()` function you have used before: how do you write the code for these data?
Try it for yourself before revealing the code.

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
study.two.gen$ETHNICITY <- as.factor(study.two.gen$ETHNICITY)
```
:::

>**Q.4.** After you have done this, what information does `summary()` give you 
about the variable `ETHNICITY`?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
summary(study.two.gen)
```
:::

<!-- - A.4. We can see that ETHNICITY lists observations following UK Office National Statistics ethnicity grouping: -->

<!-- - Asian: 15 -->
<!-- - Black: 5 -->
<!-- - Mixed: 7 -->
<!-- - White: 145 -->

##### Practical Part 3: Visualise the associations between variables

###### Practical Task 6 -- Create a scatterplot to examine the association between some variables

For this practical exercise, uou always want to use the outcome `mean.acc` as the y-axis variable so:

- `y = mean.acc`

Then you can use each numeric predictor variable as the x-axis variable so:

- `x = mean.self`

Produce scatterplots with *every* numeric predictor variable in the `study.two.gen` dataset

::: callout-tip
Remember what we saw with `summary()`: not every variable consists of numbers

If the `summary()` does not show you a mean for a variable, then R does not think
that variable is numeric
:::

Now, let's build some intuition.

Scientists often use scatterplots to get an intuitive understanding of the relationships between variables.

::: callout-tip
You can read a scatterplot to learn about the size and the direction of an association between two variables (see the week 6 lecture):

- Is the cloud of points more diffuse (the association is weaker) or more tightly clustered (the association is stronger)?
- Does the cloud of points slope upwards (the association is more positive) or slope downwards (the association is negative).
:::

The following questions ask you to look at plots, and make some judgments about what the plots tell you.

It can be hard to decide what an association looks like so make a decision based on **what you see.**

Right now, we are working to build your intuitions so: reflect, trust your intuition, and make a decision.

::: callout-tip
First draw the plot, then answer the question.
:::

>**Q.5.** What is the shape (direction) of the association between `mean.self` and `mean.acc`?

<!-- - A.5. Increase in `mean.self` is associated with increase in `mean.acc` -->

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = mean.self, y = mean.acc)) +
  geom_point()
```
:::

>**Q.6.** What is the shape (direction) of the association between `AGE` and `mean.acc`?

<!-- - A.6. There is no clear association between `AGE` and `mean.acc` -->

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = AGE, y = mean.acc)) +
  geom_point()
```
:::

>**Q.7.** What is the shape (direction) of the association between `SHIPLEY`
and `mean.acc`?

<!-- - A.7. Increase in `SHIPLEY` is associated with increase in `mean.acc` -->

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point()
```
:::

>**Q.8.** What is the shape (direction) of the association between `HLVA`
and `mean.acc`?

<!-- - A.8. Increase in `HLVA` is associated with increase in `mean.acc` -->

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = HLVA, y = mean.acc)) +
  geom_point()
```
:::

>**Q.9.** What is the shape (direction) of the association between `FACTOR3`
and `mean.acc`?

<!-- - A.9. Increase in `FACTOR3` is associated with increase in `mean.acc` -->

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = FACTOR3, y = mean.acc)) +
  geom_point()
```
:::

>**Q.10.** What is the shape (direction) of the association between `QRITOTAL`
and `mean.acc`?

<!-- - A.10. Increase in `QRITOTAL` is associated with increase in `mean.acc` -->

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = QRITOTAL, y = mean.acc)) +
  geom_point()
```
:::

##### Practical Part 4: Learn how to edit plotting code

###### Practical Task 7 -- Edit the appearance of one plot step-by-step

Edit your plotting code to make plots with a professional appearance.

Edit a scatterplot to adjust

1. the appearance of the points using `alpha`, `size` and `colour`;
2. the colour of the background using `theme_bw()`;
3. the appearance of the labels using `labs()`.

In the following, we ask you to edit one plot element at a time.
You can work out what to do.

>**Q.11.** Can you edit the appearance of the points in a scatterplot using alpha, size and colour?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = HLVA, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "red")
```
:::

>**Q.12.** Can you edit the appearance of the plot background?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = HLVA, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "red")   +
  theme_bw()
```
:::

>**Q.13.** Can you edit the appearance of the labels using `labs()`?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = HLVA, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "red")   +
  theme_bw() +
  labs(x = "HLVA", y = "mean accuracy")
```
:::

>**Q.14.** Can you find online information about colour blind palettes?

Try doing a search with the keywords: `ggplot colour blind`

<!-- - A.14. -- Here is one: -->

<!-- <http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/> -->

::: callout=tip
Now it's your turn: experiment!

- What about different colour words? Replace `"red"` with `"..."`?
- What about a different size? Replace `size = 2` with `size =  ...` using a different number.
- What about a different level of transparency (alpha)? Replace `alpha = 0.5` with `alpha =  ...` using a different fraction.
:::

##### Practical Part 5: Use correlation to to answer the research questions

###### Practical Task 8 -- Examine the correlation between mean accuracy (mean.acc) and some numeric predictor variables

>**Q.15.** What is r (given as `cor` in the output) for the correlation between `HLVA` and `mean.acc`?

Can you figure out the code to do the calculation?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
cor.test(study.two.gen$HLVA, study.two.gen$mean.acc, method = "pearson",  alternative = "two.sided")
```
:::

<!-- - A.15. r = 0.5000559 -->

>**Q.16.** Is the correlation significant?

<!-- - A.16. r is significant -->

>**Q.17.** What are the values for t and p for the significance test for the correlation?

<!-- - A.17. t = 7.5288, p = 2.866e-12 -->

>**Q.18.** What do you conclude, given the correlation results? 

Maybe draw a scatterplot to examine the shape of the association.

<!-- - A.18. `HLVA` and `mean.acc` are positively correlated suggesting that as `HLVA` scores increase so also do `mean.acc` scores -->

>**Q.19.** What is r (given as `cor` in the output) for the correlation between `mean.self` and `mean.acc`?

<!-- - A.19. r = 0.5460792 -->

Can you figure out the code to do the calculation?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
cor.test(study.two.gen$mean.self, study.two.gen$mean.acc, method = "pearson",  alternative = "two.sided")
```
:::

>**Q.20.** Is the correlation between `AGE` and `mean.acc` significant?

<!-- - A.20. r is not significant -->

Can you figure out the code to do the calculation?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
cor.test(study.two.gen$AGE, study.two.gen$mean.acc, method = "pearson",  alternative = "two.sided")
```
:::

>**Q.21.** What are the values for t and p for the significance test for the correlation between `QRITOTAL` and `mean.acc`?

<!-- - A.21. t = 6.4711, p = 9.993e-10 -->

Can you figure out the code to do the calculation?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
cor.test(study.two.gen$QRITOTAL, study.two.gen$mean.acc, method = "pearson",  alternative = "two.sided")
```
:::

>**Q.22.** What do you conclude, given the correlation results, about the association between `SHIPLEY` and `mean.acc`?

<!-- - A.22. `SHIPLEY` and `mean.acc` are positively correlated suggesting that as HLVA scores increase so also do mean.acc scores -->

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
cor.test(study.two.gen$SHIPLEY, study.two.gen$mean.acc, method = "pearson",  alternative = "two.sided")
```
:::

### The answers

After the practical class, we will reveal the answers that are currently hidden.

The answers version of the webpage will present my answers for questions, and some extra information where that is helpful.

### Look ahead: growing in independence

::: callout-important
-   Every problem you ever have: someone has had it before, solved it, and written a blog (or tweet or toot) about it.
-   R is *free open statistical software*: everything you use is contributed, discussed and taught by a community of R users online, in open forums.
-   Learning to navigate this knowledge is an introduction to the future of knowledge sharing.
:::

### Optional exercises: to stretch you

One of the convenient and powerful things about R plotting code is that you can create a series of plots and put them together in a grid of plots for east comparison: we do that here.

We will use the patchwork library: check it out

<https://patchwork.data-imaginist.com/articles/patchwork.html>

We get the library like this:

```{r}
library(patchwork)
```

Here's an example:

First create two plots: give them both names

```{r}
p.AGE <- ggplot(data = study.two.gen, aes(x = AGE, y = mean.acc)) +
  geom_point() 
#
p.SHIPLEY <- ggplot(data = study.two.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point()  
```
  
Second put the two plots together by calling their names.

```{r}
p.AGE  + p.SHIPLEY
```

Now you try it: 

1. Create two plots, using `QRITOTAL` and `SHIPLEY` as predictors, and `mean.acc` as the outcome
2. Then make a grid to present them side by side.

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
p.QRITOTAL <- ggplot(data = study.two.gen, aes(x = QRITOTAL, y = mean.acc)) +
  geom_point() 
#
p.SHIPLEY <- ggplot(data = study.two.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point()  

# -- second put them together
p.QRITOTAL  + p.SHIPLEY
```
:::


