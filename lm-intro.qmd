# Introduction to the linear model {#sec-lm-intro-intro}

```{r libraries-hide}
#| echo: false
#| warning: false
library(datasauRus)
library(faux)
library(ggExtra)
library(ggridges)
library(kableExtra)
library(knitr)
library(lme4)
library(patchwork)
library(tidyverse)
```

```{r readin-hide}
#| warning: false
#| echo: false
# -- code to read in the aggregated subject level data from the clearly-understood data set

# -- study one
study.one.gen <- read_csv("study-one-general-participants.csv")

# -- study two
study.two.gen <- read_csv("study-two-general-participants.csv")
```

## Overview {#sec-lm-intro-overview}

Welcome to your overview of the work we will do together in **Week 8**.

This week, we focus on learning **how to predict** people: predicting observations about us (e.g., our attributes) or about the things we make or do.
To do this, we will learn to think about and work with **linear models**.

Looking ahead to your professional lives, learning about linear models will equip you to do behavioural analysis in a wide range of contexts, from clinical research to business intelligence. 

As students, now, learning about linear model analyses in the context of the **Clearly understood** project will help you to understand how to critically evaluate research when you read about it (or write about it) in research reports.

You will see that the linear model is *very* flexible and powerful so learning to use it effectively involves not only learning to code analyses but also learning to think critically about what it is you want to do with it.

## Our learning goals {#sec-lm-intro-goals}

We continue to develop your critical thinking while we strengthen your practical skills.

**1. Critical thinking**

-   *Concepts*: how we go from ideas and questions to hypotheses.

As psychologists, we often want to ask questions like these:

- Does variation in one measure (X) predict variation in another variable (Y)?
- What are the factors that influence outcome Y?
- Is a theoretical model consistent with observed behaviour?

**2. Practical skills**

To enable you to answer questions like these, you will learn how to:

-   *Skills* -- code linear models;
-   *Skills* -- identify and interpret model statistics;
-   *Concepts and skills* -- critically evaluate the results;
-   *Concepts and skills* -- communicate the results.

## Learning resources {#sec-lm-intro-resources}

You will see, next, the lectures we share to explain the concepts you will learn about, and the practical data analysis skills you will develop (@sec-lm-intro-lectures). Then you will see information about the practical materials you can use to build and practise your skills (@sec-lm-intro-practical).

Every week, you will learn best if you *first* watch the lectures *then* do the practical exercises.

::: callout-tip
## Linked resources
1. In @sec-associations, we share materials to support your development of critical thinking about associations, and your development of practical skills in working with correlation-based analyses.
2. In @sec-lm-dev-intro, we share materials to extend your capacity to use linear models, to answer more and different kinds of research questions.
:::

### Lectures {#sec-lm-intro-lectures}

The lecture materials for this week are presented in four short parts. 

Click on a link and your browser should open a tab showing the *Panopto* video for the lecture part.

1. Part 1 (13 minutes) **Focus on the linear model**: The concepts and skills we will learn about in week 8: our aims, the kind of questions we can answer with linear models, and how we get from those questions to sensible linear model analyses.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=9d4653c0-9ea2-4437-a74f-af5f00b2fd2e&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC401-lm-intro-1" ></iframe>
```

2. Part 2 (15 minutes): the first key concept --- how we use linear models to predict average outcomes.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=71eaffe1-5066-425c-9ce2-af5f00b79730&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-lm-intro-2" ></iframe>
```

3. Part 3 (12 minutes): the second key concept --- how we ensure that linear models make the best predictions given the data we have.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=a08f12af-606a-4be0-90ae-af5f00bc1491&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-lm-intro-3" ></iframe>
```

4. Part 4 (14 minutes): the key skills --- coding linear models, reading model results, and writing reports of those results.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=a16c627e-609b-49db-b683-af5f00bfb15f&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-lm-intro-4" ></iframe>
```

::: callout-tip
## Download the lecture slides
The slides presented in the videos can be downloaded here:

- [The slides](files/401-linear-model-intro.html) exactly as presented (12 MB). 

You can download the web page `.html` file and click on it to open it in any browser (e.g., Chrome, Edge or Safari). The slide images are high quality so the file is quite big and may take a few seconds to download.
:::

We are going to work through some practical exercises, next, to develop your critical thinking and practical skills for working with linear models.

### Practical materials: data and R-Studio {#sec-lm-intro-practical}

We will work with two data files which you can download by clicking on their names (below):

-   [`study-one-general-participants.csv`](files/study-one-general-participants.csv).
-   [`study-two-general-participants.csv`](files/study-two-general-participants.csv).

Once you have downloaded the files, you will need to upload them to the R-Studio server to access and use the R files.

::: callout-important
Here is a link to the sign-in page for [R-Studio Server](https://psy-rstudio.lancaster.ac.uk/auth-sign-in?appUri=%2F)
:::

### Practical materials guide {#sec-lm-intro-practical-guide}

You will find that the practical exercises are simpler to do if you follow these steps in order.

1. **The data** --- We will take a quick look at what is inside the data files so you know what everything means.
2. **The `how-to` guide** --- We will go through the practical analysis and visualization coding steps, showing all the code required for each step.
3. **The `practical` exercises** --- We will set out the tasks, questions and challenges that you should complete to learn the practical skills we target this week.

This week --- **Week 8** --- we consolidate what you have been learning, so your critical thinking and practical skills have a firm foundation *then* we extend your skills by learning how to do new things.

::: callout-tip
## Week 8 parts

1. Set-up
2. Load the data
3. Revision: developing histograms to examine the distributions of variables.
4. Revision: developing scatterplots to examine associations between variables.
5. Revision: using correlations to to answer research questions --- making sure you are comfortable with the calculation and interpretation of correlation analyses.
6. **New**: using a linear model to answer research questions.
7. **New**: using a linear model to make predictions.
:::

We learn these skills so that we can answer research questions like:

1. What person attributes predict success in understanding?
2. Can people accurately evaluate whether they correctly understand written health information?
  
These kinds of research questions can often be answered through analyses using linear models.
We typically use linear models to estimate the association between predictors and outcomes.

When we do these analyses, we need to think about how we report the results:  

- We usually need to report information about the kind of model we specify;
- We will need to report the nature of the association estimated in our model;
- We usually need to decide if (i.) the association is significant? (ii.) does the association reflect a positive or negative relationship between outcome and predictor? (iii.) is the association we see in our sample data relatively strong or weak?

As we progress, we will consolidate and extend learning on data visualization so that we can produce eye-catching, appealing, plots for professional audiences.

#### The data files {#sec-lm-intro-practical-data}

Each of the data files we will work with has a similar structure.

Here are what the first few rows in the data file `study.two.gen` looks like:

```{r head}
#| warning: false
#| echo: false
kable(head(study.two.gen))
```

::: callout-tip
The webpage has a slider under the data table window, so you can scroll across the columns: move your cursor over the window to show the slider.
:::

When you look at the data table, you can see the columns:

-   `participant_ID` participant code
-   `mean.acc` average accuracy of response to questions testing understanding of health guidance
-   `mean.self` average self-rated accuracy of understanding of health guidance
-   `study` variable coding for what study the data were collected in
-   `AGE` age in years
-   `HLVA` health literacy test score
-   `SHIPLEY` vocabulary knowledge test score
-   `FACTOR3` reading strategy survey score
-   `GENDER` gender code
-   `EDUCATION` education level code
-   `ETHNICITY` ethnicity (Office National Statistics categories) code

#### The how-to guide {#sec-associations-practical-how-to}

We will take things *step-by-step*.

Make sure you complete each part, task and question, in order, before you move on to the next one.

#### How-to Part 1: Set-up

To begin, we set up our environment in R.

##### How-to Task 1 -- Run code to empty the R environment

```{r}
#| eval: false
rm(list=ls())                            
```

##### How-to Task 2 -- Run code to load libraries

Load libraries using `library()`.

```{r}
#| eval: false
library("patchwork")
library("tidyverse")
```

#### How-to Part 2: Load the data

##### How-to Task 3 -- Read in the data file we will be using

The code in the `how-to` guide was written to work with the data file:

- `study-one-general-participants.csv`.

Read in the data file -- using `read_csv()`.

```{r}
#| eval: false
study.one.gen <- read_csv("study-one-general-participants.csv")
```

::: callout-tip
Last week, we started working with the **online help** information on R functions. Let's build on that.

- You can read the technical information about the `read_csv()` function here:

<https://readr.tidyverse.org/reference/read_delim.html>

- Take a look around the `{tidyverse}` webpages: expert professionals use information like this whenever they try to figure out how to do something.
:::

##### How-to Task 4 -- Inspect the data file

Use the `summary()` function to take a look.

```{r}
summary(study.one.gen)
```

::: callout-tip
- `summary()` will give you either descriptive statistics for variable columns classified as numeric or will tell you that columns in the dataset are not numeric.
:::

#### How-to Part 3: Developing histograms to examine the distributions of variables

##### How-to Task 5 -- Edit histogram plotting code to visualize distributions like a pro

You have seen how to produce histograms before, in a previous class (week 3): here we are **consolidating** skills by practising them in different contexts, using different data.

We **extend** your skills by adding some new moves.

When we learn about creating a plot, it helps us to identify what each code element is doing.  Here's an example: run the line of code and see the result in the Plots window in R-Studio:

```{r}
ggplot(data = study.one.gen, aes(x = mean.acc)) + geom_histogram()
```

These are the plotting code elements and what they are doing:

1. `ggplot(...)` you tell R you want to make a plot using the `ggplot()` function;
2. `ggplot(data = study.one.gen ...)` you tell R you want to make a plot with the `study.one.gen` data;
3. `ggplot(..., aes(x = mean.acc))` you tell R that you want to make a plot with the variable `mean.acc`;
3. here, you specify the aesthetic mapping, `x = mean.acc`;
4. `ggplot(...) + geom_histogram()` you tell R you want to show the distribution of values of `mean.acc` as a geometric object: a histogram.

You have seen the plotting code arranged in two different ways, in one line, as above, or in a series of steps, like this:

```{r}
ggplot(data = study.one.gen, aes(x = mean.acc)) + 
  geom_histogram()
```

::: callout-tip
Notice that it has no impact whether you write the plotting code in one line, or in a series of lines.

- R cares very much about how you spell function or variable names.

- R does not usually care about line breaks.

Learning what does or does not matter is a key lesson, when you learn a language, whatever the language.
:::

If we break the plotting code into steps, it makes the code easier for you to read, and it will make it easier to add edits, one at a time.
Let's see how that works, next.

To help you learn, we are going to work on editing the code to do things, and we are going to explain *why* we want to be able to do these things.

These are the things we want to do:

1. **new** -- the appearance of the bars using `binwidth`;
2. **revision** -- the colour of the background using `theme_bw()`;
3. **revision** -- the appearance of the labels using `labs()`;
4. **new** -- setting the x-axis limits to reflect the full range of possible scores on the x-axis variable using `lim()`;
5. **new** -- adding annotation -- here, a vertical line using `geom_vline()` -- to focus the attention of the audience for a plot on specific information about the variable distribution (here, the sample average for the variable).

::: callout-tip
- Click on each `Code` tab to see how the code changes, and to see how the plot changes as a result.
- Click on each `Why` tab for an explanation of why we want to do this.
:::

1. **new** -- the appearance of the bars using `binwidth`

::: panel-tabset
## Code
```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY)) + 
  geom_histogram(binwidth = 2)
```

## Why
Histogram `binwidth` has to be a number. The best way to learn what the number tells R to do is to experiment with different values.

- Notice that in the code we set the `binwidth` to 2.
- If you are producing a histogram, `binwidth` has to be a number larger than the potential minimum and smaller than the potential maximum for the variable you are plotting: *so* for the `SHIPLEY` vocabulary test, because the test scores can only range between 0-40, the `binwidth` number you use in your plotting code has to be bigger than 0 but smaller than 40.

In general, the larger (wider) the `binwidth`, the less detail you see about the distribution of values in the variable. 

- In a histogram, each bar you draw represents a collection of values. The `binwidth` tells R how many values to collect together, for each bar. So, the bigger the width, the bigger (wider and taller) the bar because it represents more observations.

Whether or not you want to present detail is then a question concerning your communication aims: do you want to give an impression, or identify a specific detail?
:::

2. **revision** -- the colour of the background using `theme_bw()`

::: panel-tabset
## Code
```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY)) + 
  geom_histogram(binwidth = 2) +
  theme_bw()
```

## Why
In general, a grey background is argued to be a good way to present information visually but we often use a white background because it helps the plot elements to be visible, especially, for example, if we are giving a presentation.
:::

3. **revision** -- the appearance of the labels using `labs()`

::: panel-tabset
## Code
```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY)) + 
  geom_histogram(binwidth = 2) +
  theme_bw() +
  labs(x = "Vocabulary (SHIPLEY)", y = "frequency count")
```

## Why
You cannot assume that the audience for your plots will understand what you are referring to, if you just use data-set variable names e.g. `SHIPLEY`. They may not be familiar with your data-set. This means you need to use axis labels that will make sense to most people in your audience.
:::

4. **new** -- setting the x-axis limits using `lim()`

::: panel-tabset
## Code
```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY)) + 
  geom_histogram(binwidth = 2) +
  theme_bw() +
  labs(x = "Vocabulary (SHIPLEY)", y = "frequency count") +
  xlim(0,40)
```

## Why
1. It is often useful to set the axis limits like this: because we want to show the audience where the sample values are distributed compared to where they *could* be distributed, given the measure. 
2. This makes sense, e.g., if you want to see the relative age distribution of a sample compared to the population, or because we want to give the audience a more accurate picture of the data.
:::

5. **new** -- adding annotation -- here, a vertical line

::: panel-tabset
## Code
```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY)) + 
  geom_histogram(binwidth = 2) +
  theme_bw() +
  labs(x = "Vocabulary (SHIPLEY)", y = "frequency count") +
  xlim(0,40) +
  geom_vline(xintercept = mean(study.one.gen$SHIPLEY), colour = "red", linewidth = 1.5)
```

Notice that we used the `geom_vline()` element to plot a vertical line at the location on the x-axis we define.

We do this in the steps:

1. `geom_vline(...)` -- draw a vertical line;
2. `...xintercept...` -- draw the line so it hits the x-axis (intercepts the x-axis);
3. `...xintercept = mean(study.one.gen$SHIPLEY... ` -- at a location defined by the mean of the variable `mean(study.one.gen$SHIPLEY)`;
4. `...colour = "red", size = 1.5..` -- make the line red and one and a half times the default thickness.

## Why
We can use annotations, like this vertical line, when we want to draw the attention of the audience for our plot to a specific feature of the data.
:::

**What are we learning here?**

You can see that while the data stays the same, the appearance of the plot changes, as we add each edit to the plotting code.

The lesson that we are learning, here, is not just that you can arrange plotting code in steps but that *in general* in R you can build things (like plots) one action at a time.

::: callout-tip
## Further information you can explore

We can define the limits on the x-axis and on the y-axis, see the ggplot reference information on setting limits here:

<https://ggplot2.tidyverse.org/reference/lims.html>

The ggplot() reference information for drawing lines is here:

<https://ggplot2.tidyverse.org/reference/geom_abline.html>
:::

#### How-to Part 4: Developing scatterplots to examine associations between variables

##### How-to Task 6 -- Edit scatterplot code to visualize associations like a pro

You have seen these code moves before, in previous classes (weeks 3 and 4): we are **consolidating** skills by practising your coding in different contexts, using different data.

We **extend** your skills by adding some new moves.

We create scatterplots to examine the association between pairs of variables.
For example, we can draw a scatterplot to examine the association between variation in the values of `SHIPLEY` and of `mean.acc`.

```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point()
```  

The plot code moves through the following steps:  

1. `ggplot(...)` makes a plot.
2. `ggplot(data = study.one.gen, ...)` uses the `study.one.gen` data-set.
3. `ggplot(...aes(x = SHIPLEY, y = mean.acc))` uses two aesthetic mappings.
4. `geom_point()` show the mappings as points.

We are now going to edit:

1. **revision and new** -- the appearance of the points using alpha, size, **shape**, and **colour**;
2. **revision** -- the colour of the background using `theme_bw()`;
3. **revision** -- the appearance of the labels using `labs()`;
4. **new** -- the x-axis and y-axis limits using `lim()`.

We make the changes, one change at a time.

Click on the drop-down view to see the code but, if you want a challenge, first try to write the code on your own, using what you have learned so far.

1. **revision and new** -- the appearance of the points using alpha, size, **shape**, and **colour**

:::{.callout-tip collapse="true"}
## Code
```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square') 
```
:::

2. **revision** -- the colour of the background using `theme_bw()`

:::{.callout-tip collapse="true"}
## Code
```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw()
```
:::

3. **revision** -- the appearance of the labels using `labs()`

:::{.callout-tip collapse="true"}
## Code
```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw() +
  labs(x = "Vocabulary (SHIPLEY)", y = "mean accuracy")
```  
:::

4. **new** -- the x-axis and y-axis limits using `lim()`

:::{.callout-tip collapse="true"}
## Code
```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw() +
  labs(x = "SHIPLEY", y = "mean accuracy") +
  xlim(0, 40) + ylim(0, 1)
```  

Notice that:

- I set the x-axis limits to the minimum (0) and maximum (40) possible values for the `SHIPLEY` variable.

- I set the y-axis limits to the minimum (0) and maximum (1) possible values for the mean accuracy variable `mean.acc`.
:::

**What are we learning here?**

It is generally a good idea to show the minimum value (the origin) for each variable.

- Not doing this, i.e., showing a more narrow slice of the sample range is an easy way to exaggerate the strength of associations or to imply incorrectly the breadth in variation.

You can change the transparency (alpha), size, colour and shape of important parts of a plot.
Here, we are changing the appearance of the points.
But you can also change the transparency (alpha), size, colour and shape of reference lines
added to a plot.

::: callout-tip
## Further information you can explore

The ggplot geom_point() reference information is here: 

<https://ggplot2.tidyverse.org/reference/geom_point.html>

- where you can see some examples of the edits we have done.

Some useful information about shape options is here:

<http://www.cookbook-r.com/Graphs/Shapes_and_line_types/>

Some useful information about colour options is here:

<http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/>
:::

::: callout-important
Now you: experiment!
:::

#### How-to Part 4: Analyse associations

##### How-to Task 9 -- Use correlation to to answer a research question

Examine associations between variables using correlation.

One of our research questions is:

2. Can people accurately evaluate whether they correctly understand written health information?

We can answer this question by examining whether mean self-rated accuracy of understanding correlates with mean accuracy of understanding.
The logic is that if we can accurately rate our own understanding (from bad to good) then that rating should be associated -- should be correlated with -- how accurately we can actually respond to questions that test that understanding.

> Q.7. How do we examine the correlation between mean self-rated accuracy (`mean.self`) and mean accuracy (`mean.acc`)?

:::{.callout-tip collapse="true"}
## Hint
Remember from the Week 6 lecture, that we use `cor.test()`:
:::

Can you figure out how to code a correlation test?
It helps with your learning if you first try to anticipate what the code will look like.
Then reveal the code, below, to see what you guessed right.
(Getting some things right, and some things wrong, is part of the learning process.)

:::{.callout-tip collapse="true"}
## Code
> A.7. Here is how you do it: take a look at the code and the results of the correlation test.

```{r}
cor.test(study.one.gen$mean.acc, study.one.gen$mean.self, method = "pearson",  alternative = "two.sided")
```
:::

> Q.3. What is r, the correlation coefficient?

:::{.callout-tip collapse="true"}
## Answer
> A.3. r = 0.4863771
:::

> Q.4. Is the correlation significant?

:::{.callout-tip collapse="true"}
## Answer
> A.4. r is significant
:::

> Q.5. What are the values for t and p for the significance test for the correlation?

:::{.callout-tip collapse="true"}
## Answer
> A.5. t = 7.1936, p = 2.026e-11
:::

> Q.6. What do you conclude, given the correlation results?

:::{.callout-tip collapse="true"}
## Hint
Review the scatterplot you drew earlier (or draw one now) to examine the shape of the association between these variables.
:::

:::{.callout-tip collapse="true"}
## Answer
> A.6. `mean.acc` and `mean.self` are positively correlated suggesting that as 
# `mean.acc` scores increase so also do `mean.self` scores
:::





















