# Introduction to visualization {#sec-vis-intro-intro}

```{r library}
#| echo: false
#| warning: false
library(datasauRus)
library(faux)
library(ggExtra)
library(kableExtra)
library(knitr)
library(lme4)
library(patchwork)
library(tidyverse)
```

```{r readin-hide}
#| warning: false
#| echo: false
# -- code to read in the aggregated subject level data from the clearly-understood data set

# -- study one
study.one.gen <- read_csv("study-one-general-participants.csv")

# -- study two
study.two.gen <- read_csv("study-two-general-participants.csv")
```

## Overview {#sec-vis-intro-overview}

Welcome to your overview of the work we will do together in **Week 9**.

This week, we will focus on perspectives and practices in data visualization.

In a wide range of professions, you will benefit if you can exercise skills in the capacity to produce and to interpret data visualizations.

The power to produce informative eye-catching visualizations in R is industry-leading, everywhere from news media to medical science.
This means that learning how to produce visualizations using R will give you an advantage in many settings.

Our materials are designed to help you to think about what you are doing --- to understand the aims of the practical steps --- as well as to learn about producing professional effective data visualizations.
This is because, as you progress in your careers, you may come to manage as well as to direct the development of visualizations, so we need to see **what best practice looks like**.

We will continue to work with data collected for the *Clearly understood* project (@sec-associations) because we think that working with these data in this research **context** will help you to make sense of the data, and to see why we ask you to practise the skills we are teaching.

## Our learning goals {#sec-vis-intro-goals}

This week, we focus on *both* developing your critical thinking and strengthening your practical skills: our objectives blend *concepts* and *skills* targets.

**Our learning objectives: --- what are we learning about?**

We are working together to help you:

1.  *Goals* --- Formulate questions you can ask yourself to help you to work effectively
2.  *Audience* --- Understand the psychological factors that affect your impact
3.  *Development* --- Work reflectively through a development process
4.  *Implement* --- Produce visualizations in line with best practice

**Our assessment targets: --- how do you know if you have learned?**

We are working together so you can:

1.  *Goals* --- Identify a set of targets for a development process in your professional teams
2.  *Audience* --- Explain what you need to do to make a visualization effective
3.  *Development* --- Locate yourself within the stages of the development process
4.  *Implement* --- Produce visualizations that look good and are useful

## Learning resources {#sec-vis-intro-resources}

You will see, next, the lectures we share to explain the concepts you will learn about, and the practical visualization skills you will develop. Then you will see information about the practical exercises you can use to build and practise your skills.

Every week, you will learn best if you *first* watch the lectures *then* do the practical exercises.

You will realize that we are helping to build familiarity and fluency in your practical skills through the accumulation of practice, and the step-by-step extension of capabilities.

::: callout-tip
## Linked resources
1. In PSYC411: in Week 3, we started learning about histograms, bar charts, scatterplots, and boxplots; in Week 4, we revisited bar charts and scatterplots; in Week 5, we revised boxplots.
2. In PSYC411: in Week 7, we consolidated and extended your skills with scatterplots, and practised how to **read plots**.
3. In PSYC411: in Week 8, we consolidated and extended your skills with both histograms and scatterplots; learning to **combine analysis with visualization**. 
4. In PSYC413: in Week 9, we explore more broadly why being able to produce and read data visualizations is now an important **sought-after skill**.
5. In PSYC411: in Week 10, we explore how to use convenience functions to do visualization tasks automatically. We reach the **most advanced** kind of plots: presenting model estimates with raw data.

-   In @sec-visualization, as **optional reading**, we present a more extensive discussion of data visualization, explaining perspectives, and enabling you to work with richer data-sets.
:::

Throughout our materials, we have called your attention to the ecosystem of free, high-value, information that is available to people working with R.
That is because this information is an important benefit of learning to use R.

- This week we grow your capacity to find, and to use, the information you need. 
- This will help to *build your independence* for the work you will do in your future professional careers.

### Lectures {#sec-vis-intro-lectures}

The lecture materials for this week are presented in four short parts. 

Click on a link and your browser should open a tab showing the *Panopto* video for the lecture part.

1. Part 1 (12 minutes) **Data visualization perspectives and practices**: The concepts and skills we will learn about in week 9: what we will learn and how we will know if we have learned it, the different kinds of goals we think about when we make visualizations, discovery and communication.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=b7324096-ad13-4ca1-b8ab-b0c000d85850&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC401-visualization-1" ></iframe>
```

2. Part 2 (8 minutes): the evidence base, the psychology of seeing and understanding visual information, and how we know what we should do in data visualization.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=8f42d056-6da6-4aba-b893-b0c000dc28d1&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-visualization-2" ></iframe>
```

3. Part 3 (19 minutes): why visualization is important, and why the things we can do to show variation and uncertainty matter, when we communicate evidence to audiences.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=05e049cb-277d-4d76-888d-b0c000df3c6f&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-visualization-3" ></iframe>
```

4. Part 4 (25 minutes): the key skills --- `{ggplot2}` as the grammar of graphics, why we have been working on building and editing plots step-by-step, what you can do in future work.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=5fccaa55-9d07-4e24-8995-b0c0010fe92b&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="PSYC411-visualization-4" ></iframe>
```

### Lecture slides {#sec-vis-intro-lectures-slides}

::: callout-tip
## Download the lecture slides
The slides presented in the videos can be downloaded here:

- [The slides](files/401-data-visualisation-practices.html) exactly as presented (7 MB). 

You can download the web page `.html` file and click on it to open it in any browser (e.g., Chrome, Edge or Safari). The slide images are high quality so the file is quite big and may take a few seconds to download.
:::

We are going to work through some practical exercises, next, to develop your critical thinking and practical skills for working with linear models.

### Practical materials: data and R-Studio {#sec-vis-intro-practical}

We will work with two data files which you can download by clicking on their names (below):

-   [study-one-general-participants.csv](files/study-one-general-participants.csv).
-   [study-two-general-participants.csv](files/study-two-general-participants.csv).

Once you have downloaded the files, you will need to upload them to the R-Studio server to access and use the R files.

::: callout-important
Here is a link to the sign-in page for [R-Studio Server](https://psy-rstudio.lancaster.ac.uk/auth-sign-in?appUri=%2F)
:::

### Practical materials guide {#sec-lm-intro-practical-guide}

As usual, you will find that the practical exercises are simpler to do if you follow these steps in order.

1. **The data** --- We will take a quick look at what is inside the data files so you know what everything means.
2. **The `how-to` guide** --- We will go through the practical analysis and visualization coding steps, showing all the code required for each step.
3. **The `practical` exercises** --- We will set out the tasks, questions and challenges that you should complete to learn the practical skills we target this week.

This week --- **Week 9** --- our emphasis is on finding and making use of online information.

- This work will enable you to find solutions for yourself in your professional working lives
- to figure out practical *how* and *why* answers to the questions you will face.

::: callout-tip
## Week 9 parts

1. Set-up
2. Load the data
3. **Revision**: locate and use ggplot2 reference information.
4. **New**: locate and use tutorial or how-to information.
5. **New**: locate and use Stackoverflow information.
:::

There are three main sources of information you can access for free online:

1. The people who write software like the `{tidyverse}` or `{ggplot}` libraries
provide manuals, reference guides and tutorials. This information is often written as free web books, or as hard copy books.
2. Other people write tutorials or guides or teaching materials designed to show learners (like us) how to use R functions or do certain things using R. They may present these tutorials or guides as web books, blog sites or video tutorials, e.g., on Youtube or TikTok.
3. Many people post questions and answers to discussion forums like Stackoverflow.

::: callout-important
Learning how to find, understand and use this information teaches two lessons:

1. A lot of scholarly and technical information is online and free.
2. Being able to locate and to use this information is often *the* way that most professionals work out what they want to do, and how they can do it, if they have a problem or a question.
3. This means you get an advantage if you learn how to do that here.
:::

#### The data files {#sec-lm-intro-practical-data}

Each of the data files we will work with has a similar structure.

Here are what the first few rows in the data file `study.two.gen` looks like:

```{r head}
#| warning: false
#| echo: false
kable(head(study.two.gen))
```

::: callout-tip
The webpage has a slider under the data table window, so you can scroll across the columns: move your cursor over the window to show the slider.
:::

When you look at the data table, you can see the columns:

-   `participant_ID` participant code
-   `mean.acc` average accuracy of response to questions testing understanding of health guidance
-   `mean.self` average self-rated accuracy of understanding of health guidance
-   `study` variable coding for what study the data were collected in
-   `AGE` age in years
-   `HLVA` health literacy test score
-   `SHIPLEY` vocabulary knowledge test score
-   `FACTOR3` reading strategy survey score
-   `GENDER` gender code
-   `EDUCATION` education level code
-   `ETHNICITY` ethnicity (Office National Statistics categories) code

#### The how-to guide {#sec-lm-intro-practical-how-to}

We will take things *step-by-step*.

Make sure you complete each part, task and question, in order, before you move on to the next one.

#### How-to Part 1: Set-up

To begin, we set up our environment in R.

##### How-to Task 1 -- Run code to empty the R environment

```{r}
#| eval: false
rm(list=ls())                            
```

##### How-to Task 2 -- Run code to load libraries

Load libraries using `library()`.

```{r}
#| eval: false
library("tidyverse")
```

#### How-to Part 2: Load the data

##### How-to Task 3 -- Read in the data file we will be using

The code in the `how-to` guide was written to work with the data file:

- `study-one-general-participants.csv`.

Read in the data file -- using `read_csv()`.

```{r}
#| eval: false
study.one.gen <- read_csv("study-one-general-participants.csv")
```

##### How-to Task 4 -- Inspect the data file

Use the `summary()` function to take a look.

```{r}
summary(study.one.gen)
```

#### How-to Part 3: Revision -- locate and use `{ggplot2}` reference information

We have called your attention to `{ggplot2}` reference information before.

This time, we take you through the steps involved in exploiting this information efficiently to produce more plots that communicate more effectively.

##### How-to Task 5 -- Find out how to produce *layered* boxplots to examine if vocabulary scores are different for people with different education levels

You have seen how to produce boxplots before, in previous classes (weeks 3 and 5): here we add a *twist* to make the plot *dramatically* more informative.

::: callout-tip
A box plot is a visualization designed to enable you to visualize the distribution of scores on a numeric variable, sometimes so that you can compare the distribution of scores on that variable in different groups or conditions.
:::

This task is *both* about finding out how to do things (generally), here, using `{ggplot2}` reference information, and also about finding out how to produce a particularly effective form of data visualization, combining summary estimates with raw data observations.

We can break this task into steps:

1. Find relevant and useful information;
2. Locate example code;  
3. Run the example code;   
4. Edit the code to do the task with the `study.one.gen` data.

We want to make a boxplot. 
You have done that before.
But *this time* we want to make a plot that shows (i.) the summary statistics (median and quartile) information of the boxplot plus (ii.) the raw observation information about sample data values that you see in scatterplot points.
That is because, in the lectures on data visualization, we learned about the ways in which summaries can sometimes obscure what is going on with the sample data (think of Anscombe's Quartet).

How do we produce this kind of plot?

- A professional would take the wish-list of aims (i.) and (ii.) and start looking for information online to figure out how to produce the kind of plot they want.

We work through the steps in order:

**1. Find relevant and useful information**

You find the information you need by doing *keyword* searches online: but what are the keywords?

::: callout-tip
Hint: Do a search using the words: `ggplot reference`.

That will get you results including this one:

<https://ggplot2.tidyverse.org/reference/>
:::

How do you know if you can or should use this information?

- You know this source is 'official', relevant, and useful because you can see the hex badge (a hexagon shaped image): "ggplot2".

We need more *specific* information on boxplots in the `{ggplot2}` library reference information: how do we find it?

- You can do a search of the reference index, or you can expand your set of keywords.

::: callout-tip
We are looking specifically for information on box plots so do a search of the web page e.g. using `CMD-F` (on a Mac) or `CTRL-F` (on a PC) using the words: `box or boxplot`

That will get you a link -- click on it:

<https://ggplot2.tidyverse.org/reference/geom_boxplot.html>
:::

**2. Locate example code**

Most R developers design their information web pages in the same way:

- first, they show a list of arguments you can edit to make choices about how functions like `geom_boxplot()` work;
- second, they explain what the object -- here, a boxplot -- represents;
- third, they may give you information about what information the function can work with;
- fourth, they give you **example code** $\rightarrow$ **this is the bit you want**.

::: callout-tip
Example code can be run without reading in any extra data, once you have run

```{r}
library(tidyverse)
```
:::

Scroll through the page, looking for an example plot that looks like what we want: a plot which shows (i.) the summary statistics (median and quartile) information of the boxplot plus (ii.) the raw observation information (points) of the sample data.

Do you see it?

::: callout-tip
You can see the example shown under this line of code.

```{r}
#| eval: false
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
```
:::

**3. Run the example code**

Copy the first bit of example code you see and paste it directly into the R-Studio `Console` and run it, or paste it into the `Script` window and run it:

- You have to be careful. Read the sequence of example code carefully.

::: callout-tip
If you run this line of code, you will get an error, at first.

```{r}
#| eval: false
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
```
:::

This is because the `p + ` tells you that somewhere previously the sequence of examples builds a part of the plot `p` to which the next parts `geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)` are added.

- You need to make sure you run the full sequence of example code to get the plot.

::: callout-tip
If you run this line of code, it will work.

```{r}
p <- ggplot(mpg, aes(class, hwy))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
```
:::

In this sequence of code:
 
1. `p <- ggplot(mpg, aes(class, hwy))` first constructs a plot object, called `p` -- nothing will appear in the `Plots` window but the object `p` will appear in the `Environment` window in R-Studio.
2. `p + geom_boxplot(outlier.shape = NA)` adds the object `geom_boxplot()` to the object `p` -- this step is where something is produced in the `Plots` window.
3. `+ geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)` adds one plot *on top* of another.

This style of building a plot step-by-step enables you to construct quite complex plots, with multiple layers.

In the plot you can see that we get what we want. The plot shows:

- Using `geom_boxplot(outlier.shape = NA)` -- a *summary* of the data, including the median (the thick line in the middle of each box) and the 25\% and 75\% quartiles (the lower and upper edges of the box) of the observed values for the variable `hwy`, for different groups of `class`.
- Using `geom_jitter(width = 0.2)` -- the *raw* observations (of `hwy` per `class`) that the boxplots summarize, shown as the black points superimposed on the boxplots.

**4. Edit the code to do the task with the `study.one.gen` data**

Now we know that we can produce the kind of plot we want, and we have seen the code that would produce that kind of plot.

The next step is to take the code structure that we see in the example and convert it so that kind of code does the same work for our own purposes.

Let's say that I want to produce a boxplot, showing raw data observations of accuracy of understanding, `mean.acc`, for each level of education in the `study.one.gen` data-set. 

How do we convert the example code to produce the same kind of plot with *our* data?

Hint: You need to change the data, and the aesthetic mappings -- from this:

```{r}
#| eval: false
p <- ggplot(mpg, aes(class, hwy))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
```

- to this:

```{r}
#| eval: false
p <- ggplot(data = study.one.gen, aes(x = EDUCATION, y = mean.acc))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
```

Notice:

1. You can write code quite concisely, like this `ggplot(mpg, aes(class, hwy))` or more fully, like this `ggplot(data = mpg, aes(x = class, y = hwy))`.
2. You change the dataset from the example `mpg` data to our data `study.one.gen`.
3. When you construct a boxplot, `x` must be mapped `=` to a categorical variable: a nominal variable or factor like `EDUCATION`.
4. When you construct a boxplot, `y` must be mapped `=`to a numeric variable: a continuous or interval variable like `mean.acc`.
5. `geom_jitter(width = 0.2)` is new: we add that to show the raw data observations.

Now take a look at the plot we have made.

```{r}
p <- ggplot(data = study.one.gen, aes(x = EDUCATION, y = mean.acc))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
```

You can make two useful observations:

- Mean accuracy of understanding (of health information) is different in different education groups, on average -- that is what the heights of the middle lines in the boxplots tell us.
- The distribution of sample observations is *really* different for different education groups in this sample. This second observation might make us a bit uncertain about the extent to which the average outcome differences (comparing mean accuracy) reflect what we would see in the wider population.

**What are we learning here?**

There are two lessons:

- It is *very* useful to be able to find, read, and convert example code in online help information. Getting practice doing this will really helpful, not only to make it easier for you to do what we ask you to do but also for you to do things *you* decide you want to do.
- In R, the plotting code is designed to work so that we can build complex plots, layer by later.
- In general, it is helpful to be able to combine summaries with raw data.

::: callout-tip
## Further information you can explore

You can read more about boxplots here:

<https://ggplot2.tidyverse.org/reference/geom_boxplot.html>

You can read more about jittering here:

<https://ggplot2.tidyverse.org/reference/geom_jitter.html>
:::

#### How-to Part 4: New -- locate and use tutorial or how-to information

The official information provided by the developers of `{ggplot2}` or `{tidyverse}` are very useful but there is a whole other world of information --- many hundreds of web-sites --- provided by people interested in writing and sharing how-to guides and tutorials to highlight solutions to problems or answers to questions they, or others, have encountered.

##### How-to Task 6 -- Find out how to modify the colour of the boxplots to examine if vocabulary scores are different for people with different education levels, and to distinguish education by colour

This time, we again want to produce some boxplots, but we want to modify the colours of the boxes *to communicate* information about the groups in our sample data to the reader.

- We are using colour, here, not for decoration but as a third dimension of information, in addition to the height and the horizontal position of the boxes.

How do we change the colour of plot elements by linking colour differences to data differences?

We break this task into the same steps we followed before:

1. Find relevant and useful information;
2. Locate example code;  
3. Run the example code;   
4. Edit the code to do the task with the `study.one.gen` data.

**1. Find relevant and useful information**

As before, we begin with a keyword search.

::: callout-tip
Hint: Do a search using the words: ggplot boxplot colour

That will get you results including this one:

<https://r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html>
:::

This source is not official linked to the `{ggplot}` project so now you have to decide if it is useful: how do you do that?

Hint: You can decide *simply* if a source is useful by (1.) trying the example code (does it work?) and evaluating if you understand how it works (do you understand why it works?)

**2. Locate example code**

Most tutorial or how-to writers design their web pages in the same way:

- first, they identify what the question or problem is they are going to help you with;
- second, they explain what they will do;
- third, they may give you **example code** $\rightarrow$ **this is the bit you want**.

::: callout-tip
Example code is often highlighted -- can you see it in the webpage?

<https://r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html>
:::

**3. Run the example code**

How do you this?

- Usually, tutorial writers tell you first what libraries you need to load, do that, then run their example code.

::: callout-tip
Hint: Copy a chunk of example code and paste it directly into the Console and run it, or paste it into the Script window and run it:

```{r}
ggplot(mpg, aes(x=class, y=hwy, fill=class)) + 
  geom_boxplot(alpha=0.3) +
  theme(legend.position="none") +
  scale_fill_brewer(palette="BuPu")
```
:::

In this sequence of code:
 
1. `ggplot(mpg, aes(x=class, y=hwy, fill=class))` -- tells R to map `x` to `class` to distinguish different groups by left-right position, and y to `hwy` to show outcome `hwy` scores by height. What is new here is this bit `fill=class` which tells R to colour the insides of the boxes with different colours for different classes.
2. `geom_boxplot(alpha=0.3) +` -- tells R to draw boxplots, and reduce the opacity of the boxes (increase transparency).
3. `theme(legend.position="none") +` -- tells R to hide the legend.
4. `scale_fill_brewer(palette="BuPu")` -- tells R to use the blue-purple Brewer colour palette to draw the colours.

::: colour-tip
So far, you have been using the default colour palette -- sets of colours -- that are built-in in R, or in `{ggplot2}` but there are many more palettes available.
:::

**4. Edit the code to do the task with the `study.one.gen` data**

The next step is to take the code structure that we see in the example and convert it so that kind of code does the same work for our own purposes.

Let's say that I want to produce a boxplot, showing the average accuracy of understanding, `mean.acc`, for each level of education in the `study.one.gen` data-set.

- This will produce a set of boxplots. Each boxplot summarizes the `mean.acc` scores for a separate (education level) group. Now, I want to draw each boxplot in a different colour so different education levels are marked by different colours.

How do we convert the example code to produce the same kind of plot with *our* data?

Hint: You need to change the data, and the aesthetic mappings -- from this:

```{r}
#| eval: false
ggplot(mpg, aes(x=class, y=hwy, fill=class)) + 
  geom_boxplot(alpha=0.3) +
  theme(legend.position="none") +
  scale_fill_brewer(palette="BuPu")
```

- to this:

```{r}
#| eval: false
ggplot(study.one.gen, aes(x=EDUCATION, y=mean.acc, fill=EDUCATION)) + 
  geom_boxplot(alpha=0.3) +
  theme(legend.position="none") +
  scale_fill_brewer(palette="BuPu")
```

Notice:

1. You need to make sure that you copy a complete chunk of code:

- including `ggplot()`
- including `aes()`
- including `geom_boxplot()`
- including `scale_fill_brewer()`

2. You change the data-set name to `study.one.gen` and you change the `x=` and `y=` aesthetic mappings.
3. To change the colour of the boxplots, you add: `fill=EDUCATION` as an argument to the aesthetic mappings in `aes(...)`
4. `scale_fill_brewer()` adds in the colour using the Brewer **colour-blind friendly** palette.


##### How-to Task 7 -- Can you find out more information about colour palettes?

Hint: Do a search using the words: 

1. <ggplot colour palettes>
2. <ggplot colour blind friendly palettes>
3. <ggplot cookbook colour palettes>

Results include:

<https://ggplot2-book.org/scales-colour>

- or:

<http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#:~:text=(size%3D3)-,A%20colorblind%2Dfriendly%20palette,variable%2C%20then%20use%20it%20later>

These sources are quite technical in places, can you find useful example code?

**What are we learning here?**

You have seen, previously, that it is quite straightforward to change the colours of things in plots.

Here, we are learning that:

- you can use colour to communicate key information about data;
- you can *choose* colours deliberately to ensure accessibility (by using colour blind palettes) or to suit your tastes.

::: callout-tip
## Further information you can explore

There are several famous colour palettes that have been developed:

- Viridis:

<https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html>

- Brewer:

<https://ggplot2.tidyverse.org/reference/scale_brewer.html>

And some people have contributed deep thinking about *how* and *why* we should different colour schemes in different contexts or for diverse audiences:

<https://personal.sron.nl/~pault/>
:::

::: callout-important
Make *choices* when you use colour!
:::

#### How-to Part 5: Using correlations to to answer research questions

##### How-to Task 7 -- Examine the correlation between a pair of variables

In the **Clearly understood** project, one of our research questions is:

1. What person attributes predict success in understanding?

We can answer this question by doing a correlation analysis.
This is because we can expect that *if* vocabulary knowledge predicts success in understanding *then* variation in vocabulary knowledge should be associated with variation in success of understanding.
We measured how successful study participants were in understanding health information: recording outcome `mean.acc` as the accuracy of response to questions designed to examine understanding.
We measured a key person attribute, vocabulary knowledge using the `SHIPLEY` vocabulary test.
We can then examine the association between this pair of variables using correlation.

Here, we examine the correlation between the mean accuracy (`mean.acc`) of understanding of health information, and vocabulary (`SHIPLEY`) knowledge, for each person in our participant sample.

Can you figure out how to code the correlation analysis?

It helps with your learning if you first try to predict what the code will look like.
Then reveal the code, below, to see what you guessed right.

:::{.callout-tip collapse="true"}
## Code
```{r}
cor.test(study.one.gen$SHIPLEY, study.one.gen$mean.acc, method = "pearson",  alternative = "two.sided")
```
:::

> Q.1. What is r, the correlation coefficient?

:::{.callout-tip collapse="true"}
## Answer
> A.1. r = 0.334406
:::

> Q.2. Is the correlation significant?

:::{.callout-tip collapse="true"}
## Answer
> A.2. r is significant, p < .05
:::

> Q.3. What are the values for t and p for the significance test for the correlation?

:::{.callout-tip collapse="true"}
## Answer
> A.3. t = 4.5855, p = 8.846e-06
:::

> Q.4. What do you conclude is the answer to the research question, given the correlation results?

:::{.callout-tip collapse="true"}
## Hint
Review the scatterplot you drew earlier (or draw one now) to examine the shape of the association between these variables.
:::

:::{.callout-tip collapse="true"}
## Answer
> A.4. Vocabulary and `mean.acc` are positively correlated suggesting that as `SHIPLEY` scores increase so also do `mean.acc` scores.
:::

#### How-to Part 6: **New**: using a linear model to answer research questions

##### How-to Task 8 -- Code and read the results from a linear model analysis

As we have seen, one of our research questions is:

1. What person attributes predict success in understanding?

We can examine the relation between outcome mean accuracy (`mean.acc`) of understanding and vocabulary (`SHIPLEY`) knowledge by testing if person vocabulary score predicts understanding.

We do this through a linear model analysis.

We complete the analysis using the `lm()` function.

```{r}
model <- lm(mean.acc ~ SHIPLEY, data = study.one.gen)
summary(model)
```

Let's work through the elements of the linear model code so we can see what everything does:

1. `model <- lm(...)` -- fit the model using `lm(...)`, giving the model a name 
here, we just call it "model".
2. `...lm(mean.acc ~ SHIPLEY...)` -- tell R you want a model of the outcome 
`mean.acc` predicted `~` by the predictor `SHIPLEY`.
3. `...data = study.one)` -- tell R that the variables you name in the 
 formula are in the `study.one` dataset.
4. `summary(model)` -- ask R for a summary of the model you called "model": **this is how you get the results**.

::: callout-tip
Notice that R has a general formula syntax: `outcome ~ predictor` *or* `y ~ x`

- and uses the same format across a number of different functions;
- each time, on the left of the tilde symbol `~` you identify the output or outcome variable;
- but on the right of the tilde `~` you identify an input or predictor variable or set of predictor variables.
:::
  
If you look at the model summary you can answer the following questions.

> Q.5. What is the estimate for the coefficient of the effect of the predictor, SHIPLEY?

:::{.callout-tip collapse="true"}
## Answer
> A.5. 0.01050 
:::

> Q.6. Is the effect significant?

:::{.callout-tip collapse="true"}
## Answer
> A.6. It is significant, p < .05
:::

> Q.7. What are the values for t and p for the significance test for the coefficient?

:::{.callout-tip collapse="true"}
## Answer
> A.7. t = 4.585, p = 8.85e-06
:::

> Q.8. What do you conclude is the answer to the research question, given the linear model results?

:::{.callout-tip collapse="true"}
## Answer
> A.8. The model slope estimate suggests that as `SHIPLEY` scores increase so also do `mean.acc` scores.
:::

#### How-to Part 7: **New**: using a linear model to generate predictions

##### How-to Task 9 -- Fit a linear model and plot the model predictions

We can use the model we have just fitted to plot the model predictions.

- The estimates of the coefficients (given in summary results) are the information we need to generate predictions.
- What we are predicting is how values of the outcome variable change, on average, given different values in one or more predictor variables.
- We can produce predictions by working with linear model estimates of (1.) the intercept and (2.) the coefficient of the effect of each predictor variable.
- The effect of a predictor tells you *how* the outcome changes (how much the outcome increases or decreases), given different values of the predictor.

We are going to do this prediction in two steps:

1. **revision** -- fit a linear model to estimate the relationship between the outcome and the predictor variables.
2. **new** -- draw a scatterplot and add a line to show the model predictions, given the model estimates.

We work through these steps in turn.

**Step 1. First fit a linear model and get a summary of the estimates**

```{r}
model <- lm(mean.acc ~ SHIPLEY, data = study.one.gen)
summary(model)
```

> Q.9. What is the coefficient estimate for the intercept?

> A.9. 0.44914

> Q.10. What is the coefficient estimate for the slope of SHIPLEY?

> A.10. 0.01050

**Step 2. Second, draw a scatterplot and add a line to show the model predictions**

We use the `geom_abline()` function to draw the line.

```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  geom_abline(intercept = 0.44914, slope = 0.01050, colour = "red", linewidth = 1.5) +
  theme_bw() +
  labs(x = "SHIPLEY", y = "mean accuracy") +
  xlim(0, 40) + ylim(0, 1)
```

You can see that the only **new** thing we do here is to:

1. add the `geom_abline(...)` function;
2. and, inside the brackets, add information about the intercept and the slope estimates.

Note that we can get the prediction line drawn for us automatically.

:::{.callout-tip collapse="true"}
## Hint
```{r}
ggplot(data = study.one.gen, aes(x = SHIPLEY, y = mean.acc)) +
  # geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  geom_smooth(method = 'lm', colour = "purple", alpha = .2, linewidth = 2.5, se = FALSE) +
  geom_abline(intercept = 0.44914, slope = 0.01050, colour = "red", linewidth = 1) +
  theme_bw() +
  labs(x = "SHIPLEY", y = "mean accuracy") +
  xlim(0, 40) + ylim(0, 1)  
```

Here, I turned the points off by commenting them out, adding `#` to the start of the line.

- I added `geom_smooth(method = 'lm', ...)` to draw a prediction line.

You can compare the red prediction line I drew using the model estimates with the purple line I used `geom_smooth()` to draw automatically, to see that they are identical.

You have seen `geom_smooth()` before: this shows you how it works.
:::

**What are we learning here?**

We want to generate model predictions because doing this unlocks a key concept in understanding why we use linear models and what we do.

- Linear models are an analysis method based on the *prediction* of the average change in outcome variable values, given different values of one or more predictor variables.

::: callout-tip
## Further information you can explore
You can get `{ggplot2}` reference information to see what `geom_smooth()` does:

<https://ggplot2.tidyverse.org/reference/geom_smooth.html>

You can see reference information on drawing lines here:

<https://ggplot2.tidyverse.org/reference/geom_abline.html>
:::

#### The practical exercises {#sec-lm-intro-practical-workbook}

Now you will progress through a series of tasks, and challenges, to test what you have learnt.

::: callout-warning
Now we will work with the data file

-   `study-two-general-participants.csv`
:::

We again split the steps into into parts, tasks and questions.

We are going to work through the following workflow steps: **each step is labelled as a practical part**.

1. Set-up
2. Load the data
3. Revision: developing histograms to examine the distributions of variables.
4. Revision: developing scatterplots to examine associations between variables.
5. Revision: using correlations to to answer research questions --- making sure you are comfortable with the calculation and interpretation of correlation analyses.
6. **New**: using a linear model to answer research questions.
7. **New**: using a linear model to make predictions.

::: callout-tip
- The `how-to` guide showed you what functions you needed and how you should write the function code.
- Use the code structure you have seen and *change* it to use the data required for these `practical exercises`: you will need to change the data-set name, the variable names, to get the code to work for the following exercises.
- Identify what code elements must change, and what code elements have to stay the same.
:::

In the following, we will guide you through the tasks and questions step by step.

::: callout-important
An answers version of the workbook will be provided after the practical class.
:::

#### Practical Part 1: Set-up

To begin, we set up our environment in R.

##### Practical Task 1 -- Run code to empty the R environment

```{r}
#| eval: false
rm(list=ls())
```

##### Practical Task 2 -- Run code to load relevant libraries

```{r}
#| eval: false
library("tidyverse")
```

#### Practical Part 2: Load the data

##### Practical Task 3 -- Read in the data file we will be using

The data file for the practical exercises is:

- `study-two-general-participants.csv`

Use the `read_csv()` function to read the data file into R.

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
study.two.gen <- read_csv("study-two-general-participants.csv")
```
:::

When you code this, you can choose your own file name, but be sure to give the data object you create a distinct name e.g. `study.two.gen`.

##### Practical Task 4 -- Inspect the data file

Use the `summary()` function to take a look.

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
summary(study.two.gen)
```
:::

This time:

- Pay attention to what you see, for the numeric variables, in the information about minimum `Min.` and maximum `Max.` values.

#### Practical Part 3: Revision -- developing histograms to examine the distributions of variables

##### Practical Task 5 -- Practise editing the appearance of a histogram plot step-by-step

Start by constructing a basic histogram.

- Draw a histogram plot to visualize the distribution of *any* numeric variable from the `study.two.gen` data-set.

:::{.callout-tip collapse="true"}
## Hint
- Use the line-by-line format to break the plot code into steps.
- It will make it easier to read, and it will make it easier to add edit.
::: 

1. Pick a numeric variable in the dataset.
2. Run the code to produce a histogram to show the distribution of values for that variable in the data.

Can you work out how to do it without looking at the code example?

Click on the button to see the code example: compare it to the code you wrote.

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY)) + 
  geom_histogram()
```
:::

Next, we are going to edit:

1. **new** -- the appearance of the bars using `binwidth`;
2. **revision** -- the appearance of the background;
3. **revision** -- the appearance of the labels using `labs()`;
4. **new** -- setting the x-axis limits to reflect the full range of possible scores on the x-axis variable using `xlim()`;
5. **new** -- adding annotation -- here, a vertical line using `geom_vline()`.

>**Q.1.** Can you edit the appearance of the bars by specifying a `binwidth` value?

:::{.callout-tip collapse="true"}
## Hint
Remember: 

- The `binwidth` number has to be a value between the smallest possible value and the largest possible value for the variable. For example, if the variable is `AGE` then the smallest possible value will be 0. So `binwidth` has to be some number bigger than 0.
- You can experiment with different numbers to find a balance between a histogram that shows detail (more, narrow, bars) and a histogram that shows an impression (fewer, wider, bars).
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY)) + 
  geom_histogram(binwidth = 2)
```
:::

>**Q.2.** Can you edit the appearance of the background?

:::{.callout-tip collapse="true"}
## Hint
There are a range of themes that you can use.  Why not pick one of the options shown here:

<https://ggplot2.tidyverse.org/reference/ggtheme.html>
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY)) + 
  geom_histogram(binwidth = 2) +
  theme_bw()
```
:::

>**Q.3.** Can you edit the appearance of the labels?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY)) + 
  geom_histogram(binwidth = 2) +
  theme_bw() +
  labs(x = "SHIPLEY", y = "frequency count")
```
:::

>**Q.4.** Can you edit the x-axis limits?

:::{.callout-tip collapse="true"}
## Hint
What you want to do, here, is to show the smallest possible value (often, not always 0) for values in the variable.

- The idea is that you want to see the distribution of values in the sample (the histogram), for the variable, in the context of the full possible range of values for that variable.
- You can use the `summary()` information to make your choice of limits.

Drawing a histogram like this allows you to show the reader how the sample compares to the wider population.
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY)) + 
  geom_histogram(binwidth = 2) +
  theme_bw() +
  labs(x = "Vocabulary (SHIPLEY)", y = "frequency count") +
  xlim(0,40)
```
:::

>**Q.5.** Can you add annotation: a vertical line to show the mean value of 
the variable you are plotting?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY)) + 
  geom_histogram(binwidth = 2) +
  theme_bw() +
  labs(x = "Vocabulary (SHIPLEY)", y = "frequency count") +
  xlim(0,40) +
  geom_vline(xintercept = mean(study.two.gen$SHIPLEY), colour = "red", size = 1.5)
```
:::

>**Q.6.** Where can you find information on how to define the limits on the x-axis 
and on the y-axis?

:::{.callout-tip collapse="true"}
## Hint
You can see the information in this week's `how-to` guide but try a search online for the keywords: `ggplot reference xlim`.
:::

<!-- - A.6. See ggplot reference information on setting limits here: -->

<!-- <https://ggplot2.tidyverse.org/reference/lims.html> -->

>**Q.7.** Where can you find information on how to draw a reference line?

:::{.callout-tip collapse="true"}
## Hint
You can see the information in this week's `how-to` but try a search online for the keywords: `ggplot reference vline`.
:::

<!-- - A.7. See ggplot reference information on adding lines here: -->

<!-- <https://ggplot2.tidyverse.org/reference/geom_abline.html> -->

#### Practical Part 4: Developing scatterplots to examine associations between variables

##### Practical Task 6 -- Create a scatterplot to examine the association between some variables

Create three scatterplots to visualize the relationship between (1.) the outcome `mean.acc` and (2.) each of three numeric potential predictor variables `SHIPLEY`, `HLVA` and `AGE`.

Check first if you can write the code you need to produce each scatterplot.
Click on the button to see the code example: compare it to the code you wrote.

:::{.callout-tip collapse="true"}
## Code

Check out the example code for each of the scatterplots we are asking you to do.

- Notice what changes and what stays the same.

```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point()

ggplot(data = study.two.gen, aes(x = HLVA, y = mean.acc)) +
  geom_point()

ggplot(data = study.two.gen, aes(x = AGE, y = mean.acc)) +
  geom_point()
```
:::

##### Practical Task 7 -- Edit the appearance of *each* plot step-by-step

1. You may want to use the same plot edit choices for all plots.

- Producing plots with a consistent appearance will make it easier for 
your audience to read your plots.

2. You can find links to relevant information on options in the `how-to` guide.

- Use the information to make the plots pleasing in appearance to you.

:::{.callout-tip collapse="true"}
## Hints
- Do not be afraid to select, copy then paste code to re-use it and *save yourself* the effort of typing out the code over and over again.
- But be careful to make sure that you change variable names, and that things like axis values are sensible for each variable.
:::

>**Q.8.** Can you edit the appearance of the points using `alpha`, `size`, `shape`, and `colour`?

:::{.callout-tip collapse="true"}
## Code
Check out the example code for each of the scatterplots.

- Notice what changes and what stays the same.

```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')

ggplot(data = study.two.gen, aes(x = HLVA, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')

ggplot(data = study.two.gen, aes(x = AGE, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')
```
:::

>**Q.9.** Can you edit the appearance of the background?

:::{.callout-tip collapse="true"}
## Code
Check out the example code for each of the scatterplots.

- Notice what changes and what stays the same.

```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw()

ggplot(data = study.two.gen, aes(x = HLVA, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw()

ggplot(data = study.two.gen, aes(x = AGE, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw()
```
:::

>**Q.10.** Can you edit the appearance of the labels?

:::{.callout-tip collapse="true"}
## Code
Check out the example code for each of the scatterplots.

- Notice what changes and what stays the same.

```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw() +
  labs(x = "SHIPLEY", y = "mean accuracy")

ggplot(data = study.two.gen, aes(x = HLVA, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw() +
  labs(x = "HLVA", y = "mean accuracy")

ggplot(data = study.two.gen, aes(x = AGE, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw() +
  labs(x = "Age (Years)", y = "mean accuracy")
```
:::

>**Q.11.** Can you set the x-axis and y-axis limits to 0 (as the minimum) versus the sample data maximum values for the variables you are plotting?

:::{.callout-tip collapse="true"}
## Hint
- For these plots the y-axis limits will be the same because the outcome stays the same across plots.
- The x-axis limits will be different for each different predictor variable.
- Check out the information in the `summary()` of the dataset.
- The minimum values for the variables will often be 0, e.g., if you are looking at data from ability tests and people who do the tests can get 0. But if you are looking at, e.g., ratings data then the minimum value could be 1, e.g., because people are asked to rate something on a scale from 1-9.
:::

Check first if you can write the code you need to produce each scatterplot.
Click on the button to see the code example: compare it to the code you wrote.

:::{.callout-tip collapse="true"}
## Code
Check out the example code for each of the scatterplots.

- Notice what changes and what stays the same.

```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = SHIPLEY, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw() +
  labs(x = "SHIPLEY", y = "mean accuracy") +
  xlim(0, 40) + ylim(0, 1)

ggplot(data = study.two.gen, aes(x = HLVA, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw() +
  labs(x = "HLVA", y = "mean accuracy") +
  xlim(0, 16) + ylim(0, 1)

ggplot(data = study.two.gen, aes(x = AGE, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  theme_bw() +
  labs(x = "Age (Years)", y = "mean accuracy") +
  xlim(0, 80) + ylim(0, 1)
```
:::

#### Practical Part 5: Using correlations to to answer research questions --- making sure you are comfortable

One of our research questions is:

1. What person attributes predict success in understanding?

##### Practical Task 8 -- Examine the correlations between the outcome variable and predictor variables

Run three correlations to look at this question: 

1. between mean accuracy and `SHIPLEY`;
2. between mean accuracy and `HLVA`; 
3. between mean accuracy and `AGE`.

Check first if you can write the code you need to complete each correlation analysis.
Click on the button to see the code example: compare it to the code you wrote.

:::{.callout-tip collapse="true"}
## Code
Check out the example code for doing each of the correlation analyses.

- Notice what changes and what stays the same.

```{r}
#| eval: false
cor.test(study.two.gen$SHIPLEY, study.two.gen$mean.acc, method = "pearson",  alternative = "two.sided")

cor.test(study.two.gen$HLVA, study.two.gen$mean.acc, method = "pearson",  alternative = "two.sided")

cor.test(study.two.gen$AGE, study.two.gen$mean.acc, method = "pearson",  alternative = "two.sided")
```
:::

Now use the results from the correlations to answer the following questions.

>**Q.12.** What is `r`, the coefficient for the correlation between `mean.acc` and `SHIPLEY`?

<!-- - A.12. r = 0.4650537 -->

>**Q.13.** Is the correlation between `mean.acc` and `HLVA`  significant?

<!-- - A.13. -- r is significant, p < .05 -->

>**Q.14.** What are the values for t and p for the significance test for the correlation between `mean.acc` and `AGE`?

<!-- - A.14. t = 0.30121, p = 0.7636 -->

>**Q.15.** For which pair of outcome-predictor variables is the correlation the largest?

<!-- - A.15. -- The correlation is the largest between `mean.acc` and `HLVA`. -->

>**Q.16.** What is the sign or direction of each of the correlations?

<!-- - A.16. -- All the correlations are positive. -->

#### Practical Part 6: Using a linear model to to answer research questions

Now we can use linear models to try to answer the question:

1. What person attributes predict success in understanding?

##### Practical Task 9 -- Examine the relation between outcome mean accuracy (`mean.acc`) and each of the predictors: `SHIPLEY`, `HLVA` and `AGE`

You need to run three separate `lm()` analyses:

1. with mean accuracy `mean.acc` as the outcome and `SHIPLEY` as the predictor;
2. with mean accuracy `mean.acc` as the outcome and `HLVA` as the predictor; 
3. with mean accuracy `mean.acc` as the outcome and `AGE` as the predictor.

:::{.callout-tip collapse="true"}
## Hints
You need to use `lm()` to do the analyses.

1. Be careful to identify the outcome and predictor variables correctly.
2. Remember that analysis code is arranged like this:

```{r}
#| eval: false
lm(outcome.variable ~ predictor.variable, data = data.set)
```

With:

- `lm()` asking R to do the linear model analysis;
- `outcome.variable ~ ...` specified on the *left* of the `~`;
- the `predictor.variable ~ ...` specified on the *right* of the `~`;
- and `data.set` identifying to R what dataset you are working with.
:::

Check first if you can write the code you need to complete each linear model analysis.
Click on the button to see the code example: compare it to the code you wrote.

:::{.callout-tip collapse="true"}
## Code
Check out the example code for each of the models.

- Notice what changes and what stays the same.

```{r}
#| eval: false
model.1 <- lm(mean.acc ~ SHIPLEY, data = study.two.gen)
summary(model.1)

model.2 <- lm(mean.acc ~ HLVA, data = study.two.gen)
summary(model.2)

model.3 <- lm(mean.acc ~ AGE, data = study.two.gen)
summary(model.3)
```
:::

If you look at the model summary you can answer the following questions.

>**Q.17.** What is the estimate for the coefficient of the effect of the predictor `HLVA` on `mean.acc`?

<!-- - A.17. 0.026207  -->

>**Q.18.** Is the effect significant?

<!-- - A.18. It is significant, p < .05 -->

>**Q.19.** What are the values for t and p for the significance test for the coefficient?

<!-- - A.19. t = 7.529, p = 2.87e-12 -->

>**Q.20.** How would you describe in words the shape or direction of the association between `HLVA` and `mean.acc`?

<!-- - A.20. The slope coefficient -- and a scatterplot (draw it) -- suggest that as HLVA scores increase so also do mean accuracy scores. -->

>**Q.21.** How how would you describe the relations apparent between the predictor and outcome in all three models?

<!-- - A.21. It is possible to see, given coefficient estimates, that the association between predictor and outcome is positive for each model: mean accuracy appears to increase for increasing values of SHIPLEY vocabulary, HLVA health literacy, and age. -->

#### Practical Part 7: Using a linear model to make predictions

##### Practical Task 10 -- Fit a linear model and use the results to plot the model predictions

We are going to draw a scatterplot and add a line.

- The line will show the model predictions, given the model intercept and effect 
coefficient estimates.

**Step 1. First fit a linear model and get a summary of the estimates**

Fit a model with mean accuracy `mean.acc` as the outcome and `HLVA` as the predictor.

Check if you can write the code you need to complete the linear model analysis.
Click on the button to see the code example: compare it to the code you wrote.

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
model <- lm(mean.acc ~ HLVA, data = study.two.gen)
summary(model)
```
:::

You will need to record some information from the model summary so you can use it next.

>**Q.22.** What is the coefficient estimate for the intercept?

<!-- - A.22. 0.522016 -->

>**Q.23.** What is the coefficient estimate for the slope of `HLVA`?

<!-- - A.23. 0.026207 -->

**Step 2. Second, draw a scatterplot and add a line to show the model predictions**

Check first if you can write the code you need to produce the prediction plot.
Click on the button to see the code example: compare it to the code you wrote.

:::{.callout-tip collapse="true"}
## Code
```{r}
#| eval: false
ggplot(data = study.two.gen, aes(x = HLVA, y = mean.acc)) +
  geom_point(alpha = 0.5, size = 2, colour = "blue", shape = 'square')   +
  geom_abline(intercept = 0.522016, slope = 0.026207, 
              colour = "red", size = 1.5) +
  theme_bw() +
  labs(x = "HLVA", y = "mean accuracy") +
  xlim(0, 15) + ylim(0, 1)
```
:::

#### You have now completed the Week 7 practical exercises and questions

::: callout-important
Predicting human behaviour is at the heart of:

- Psychological science, and our collective attempt to understand ourselves.
- Behavioural analytics, and the ways businesses work with what we know about people.

This is an important step in your developmental journey: **Well done!**

- We will continue to deepen and extend your skills and understanding but everything builds on the key lessons we have been learning here.
:::

### The answers

After the practical class, we will reveal the answers that are currently hidden.

The answers version of the webpage will present my answers for questions, and some extra information where that is helpful.







### Summary

You start your work with these questions:

1.  What are our goals?
2.  What does our audience need or expect?

You develop your visualization in a reflective process:

1.  Begin with a quick draft to show the distributions or make the comparisons you think about first
2.  Then reflect, and edit: does this enable me to discover sources of variability in my data?
3.  Then reflect, and edit: does this enable me to effectively communicate what I want to communicate?
4.  Then reflect, and edit: does this look good? -- do my viewers tell me this works well?

::: callout-tip
I can only show you the potential for creative and effective visualization

-   experiment and find what looks good and is useful to you
-   seek out information -- good places to start are:

<https://ggplot2.tidyverse.org/index.html>

<https://r-graph-gallery.com>
:::
